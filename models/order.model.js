const mongoose = require("mongoose")

// Define Mongoose Schema
const orderSchema = new mongoose.Schema({
	warehouse_id: mongoose.Schema.Types.ObjectId,
	client_id: mongoose.Schema.Types.ObjectId,
	client_name: String,
	is_client_deleted: Boolean,
	code: Number,
	status: String,
	order_type: String,
	is_open: Boolean,
	packed_override: Boolean,
	shipped_override: Boolean,
	is_confirmed: Boolean,
	is_assigned: Boolean,
	is_uploaded: Boolean,
	shipping_address: {
		verified: Boolean,
		name: String,
		company: String,
		address_line1: String,
		city: String,
		state: String,
		state_code: String,
		country: String,
		country_code: String,
		zip: String,
		phone_number: {
			number: String,
			country_code: String,
		},
		latitude: String,
		longitude: String,
		formatted_address: String,
		customer_id: mongoose.Schema.Types.ObjectId,
	},
	requires_override: Boolean,
	items: [
		{
			item_id: mongoose.Schema.Types.ObjectId,
			sku: String,
			scannable: String,
			name: String,
			description: String,
			total_qty: Number,
			remaining_qty: Number,
			unit: String,
			base_conversion_rate: Number,
			uom_id: mongoose.Schema.Types.ObjectId,
			base_unit: String,
			is_picked_up: Boolean,
			is_allocated: Boolean,
			is_kit: Boolean,
			picklists: [
				{
					picklist_id: mongoose.Schema.Types.ObjectId,
					picklist_code: Number,
				},
			],
			is_hazmat: Boolean,
		},
	],
	created_at: Date,
	created_by: {
		user_id: mongoose.Schema.Types.ObjectId,
		name: String,
		username: String,
		email: String,
	},
	is_picklist: Boolean,
	is_ready_for_consolidation: Boolean,
	is_batched: Boolean,
	initial_allocation_ongoing: Boolean,
	is_manually_allocated: Boolean,
	on_hold: Boolean,
	is_reclamation_created: Boolean,
	disable_carrier_shipping: Boolean,
	customer_type: String,
	picklist_generated_on: Date,
	last_picked_by: {
		user_id: mongoose.Schema.Types.ObjectId,
		name: String,
		username: String,
		email: String,
	},
	picked_at: Date,
	is_packed: Boolean,
	shipments: [
		{
			shipment_id: String,
			shipment_status: String,
			package_id: mongoose.Schema.Types.ObjectId,
			integration: String,
			carrier: String,
			service: String,
			cost: {
				value: Number,
				currency: String,
				symbol: String,
			},
			tracking_number: String,
			label: String,
			public_url: String,
			ship_date: Date,
			created_at: Date,
			easypost_order_id: String,
			to_address: {
				verified: Boolean,
				name: String,
				company: String,
				address_line1: String,
				city: String,
				state: String,
				state_code: String,
				country: String,
				country_code: String,
				zip: String,
				phone_number: {
					number: String,
					country_code: String,
				},
			},
			from_address: {
				verified: Boolean,
				company: String,
				address_line1: String,
				city: String,
				state: String,
				state_code: String,
				country: String,
				country_code: String,
				zip: String,
				phone_number: {
					country_code: String,
				},
			},
			document: {
				postage_label: {
					id: String,
					object: String,
					createdat: Date,
					updatedat: Date,
					integratedform: String,
					labeldate: Date,
					labelepl2url: String,
					labelfiletype: String,
					labelpdfurl: String,
					labelresolution: Number,
					labelsize: String,
					labeltype: String,
					labelurl: String,
					labelzplurl: String,
				},
			},
			purchased_through_leanafy: Boolean,
			weight: {
				value: Number,
				unit: String,
			},
			dimensions: {
				height: Number,
				width: Number,
				length: Number,
				unit: String,
			},
			delivery_date: Date,
		},
	],
	is_shipped: Boolean,
	shipped_at: Date,
	closed_at: Date,
	closed_by: {
		name: String,
	},
})

const Order = mongoose.model("Order", orderSchema, "order")

module.exports = Order
